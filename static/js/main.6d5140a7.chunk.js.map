{"version":3,"sources":["components/Board-Square.tsx","index.tsx"],"names":["Square","props","className","onClick","value","Board","renderSquare","i","squares","Game","state","Array","fill","xIsNext","Xcount","Ocount","Winner","isGiveUp","setIsGiveUp","bind","_Pass","setRestart","current","this","setState","setInitialBoard","checkFripOver_Count","currentXcount","currentOcount","currentROW","Math","floor","checkRightNum","index","j","checkLeftNum","checkUpNum","checkDownNum","NULLcount","Object","keys","forEach","alert","status","winner","restart","type","Fragment","handleClick","React","Component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6d5140a7.chunk.js","sourcesContent":["import React from 'react';\nimport '../index.css';\n\ninterface SquareProps {\n  value: any;\n  onClick: () => void;\n}\n\nconst Square = (props: SquareProps) => {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\ninterface BoardProps {\n  squares: ('O' | 'X' | null)[];\n  onClick: (i: number) => void;\n}\n\nconst Board =  (props: BoardProps) =>{\n\n  const renderSquare = (i: number) => {\n    return <Square value={props.squares[i]}\n            onClick={() => props.onClick(i)}\n            />;\n    }\n\n  return (\n    <div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n        {renderSquare(6)}\n        {renderSquare(7)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(8)}\n        {renderSquare(9)}\n        {renderSquare(10)}\n        {renderSquare(11)}\n        {renderSquare(12)}\n        {renderSquare(13)}\n        {renderSquare(14)}\n        {renderSquare(15)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(16)}\n        {renderSquare(17)}\n        {renderSquare(18)}\n        {renderSquare(19)}\n        {renderSquare(20)}\n        {renderSquare(21)}\n        {renderSquare(22)}\n        {renderSquare(23)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(24)}\n        {renderSquare(25)}\n        {renderSquare(26)}\n        {renderSquare(27)}\n        {renderSquare(28)}\n        {renderSquare(29)}\n        {renderSquare(30)}\n        {renderSquare(31)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(32)}\n        {renderSquare(33)}\n        {renderSquare(34)}\n        {renderSquare(35)}\n        {renderSquare(36)}\n        {renderSquare(37)}\n        {renderSquare(38)}\n        {renderSquare(39)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(40)}\n        {renderSquare(41)}\n        {renderSquare(42)}\n        {renderSquare(43)}\n        {renderSquare(44)}\n        {renderSquare(45)}\n        {renderSquare(46)}\n        {renderSquare(47)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(48)}\n        {renderSquare(49)}\n        {renderSquare(50)}\n        {renderSquare(51)}\n        {renderSquare(52)}\n        {renderSquare(53)}\n        {renderSquare(54)}\n        {renderSquare(55)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(56)}\n        {renderSquare(57)}\n        {renderSquare(58)}\n        {renderSquare(59)}\n        {renderSquare(60)}\n        {renderSquare(61)}\n        {renderSquare(62)}\n        {renderSquare(63)}\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n","import React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport Board from './components/Board-Square';\nimport './index.css';\n\n/*interface HistoryData {\n  squares: ('O' | 'X' | null)[];\n}*/\ninterface GameState {\n  squares: ('O' | 'X' | null)[];\n  xIsNext: boolean;\n  Xcount: number;\n  Ocount: number;\n  Winner: ('O' | 'X' | 'Draw' | null);\n  isGiveUp: boolean;\n}\n\nclass Game extends React.Component<{}, GameState> {\n  constructor() {\n    super({});\n    this.state = {\n      squares: Array(63).fill(null),\n      xIsNext: true,\n      Xcount: 2,\n      Ocount: 2,\n      Winner: null,\n      isGiveUp: false\n    };\n    this.setIsGiveUp = this.setIsGiveUp.bind(this);\n    this._Pass = this._Pass.bind(this);\n    this.setRestart = this.setRestart.bind(this);\n  }\n\n  setInitialBoard() { //石の初期配置\n    const current = {...this.state.squares};\n    current[27] = \"X\";\n    current[36] = \"X\";\n    current[28] = \"O\";\n    current[35] = \"O\";\n    this.setState({\n      squares: current,\n    });\n    //this.state.squares.map((temp)=>console.log(temp));\n  }\n\n  setRestart() {\n    this.setState({\n      squares: Array(63).fill(null),\n      xIsNext: true,\n      Xcount: 2,\n      Ocount: 2,\n      Winner: null,\n      isGiveUp: false\n    }, () => this.setInitialBoard());\n    \n  }\n\n  handleClick(i: number) {\n    const squares = {...this.state.squares};\n    if (squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n      }, () => this.checkFripOver_Count(i));\n  }\n\n  setIsGiveUp() {\n    this.setState({isGiveUp: true});\n    if (this.state.xIsNext) {\n      this.setState({Winner: 'O'});\n    } else {\n      this.setState({Winner: 'X'});\n    }\n  }\n\n  _Pass() {\n    this.setState({xIsNext: !this.state.xIsNext});\n  }\n\n  checkFripOver_Count(i: number) {\n    const currentXcount = this.state.Xcount;\n    const currentOcount = this.state.Ocount;\n    const squares = {...this.state.squares};\n    const current = squares[i];//現在、クリック（配置）された場所の石（'X' or 'O'）\n    const currentROW = Math.floor(i/8);//クリックされた場所の行\n\n    /*------------ Check Right Row --------------*/\n    const checkRightNum = ((currentROW + 1) * 8 - 1) - i;  //(34/8+1=5)*8-1=39, 39 - i(=34)= // (iの列の最後尾のindex) - i = チェックする数\n    for (let index = i+1; index <= i+checkRightNum; index++) {\n      if (squares[index] === current)  {\n        for (let j = index; j > i; j--) {\n          squares[j] = current;\n        }\n        break;\n      } else if (squares[index] === null) {\n        break;\n      }\n    }\n\n    /*------------ Check Left Row --------------*/\n    const checkLeftNum = i - currentROW * 8;  // i - (iの列の先頭のindex) = チェックする数\n    for (let index = i-1; index >= i-checkLeftNum; index--) {\n      if (squares[index] === current)  {\n        for (let j = index; j < i; j++) {\n          squares[j] = current;\n        }\n        break;\n      } else if (squares[index] === null) {\n        break;\n      }\n    }\n\n    /*------------ Check Up Column --------------*/\n    const checkUpNum = i/8;\n    for (let index = i-8; index >= i-checkUpNum*8; index-=8) {\n      if (squares[index] === current)  {\n        for (let j = index; j < i; j+=8) {\n          squares[j] = current;\n        }\n        break;\n      } else if (squares[index] === null) {\n        break;\n      }\n    }\n\n    /*------------ Check Down Column --------------*/\n    const checkDownNum = 8-checkUpNum;\n    for (let index = i+8; index <= i+checkDownNum*8; index+=8) {\n      if (squares[index] === current)  {\n        for (let j = index; j > i; j-=8) {\n          squares[j] = current;\n        }\n        break;\n      } else if (squares[index] === null) {\n        break;\n      }\n    }\n\n    /*------------ Check Upper Right --------------*/\n    for (let index: number = i-7; index >= i-checkRightNum*7; index-=7) {\n      if (squares[index] === current)  {\n        for (let j = index; j < i; j+=7) {\n          squares[j] = current;\n        }\n        break;\n      } else if (squares[index] === null) {\n        break;\n      }\n    }\n\n    /*------------ Check Lower Right --------------*/\n    for (let index: number = i+9; index <= i+checkRightNum*9; index+=9) {\n      if (squares[index] === current)  {\n        for (let j = index; j > i; j-=9) {\n          squares[j] = current;\n        }\n        break;\n      } else if (squares[index] === null) {\n        break;\n      }\n    }\n\n    /*------------ Check Upper Left --------------*/\n    for (let index = i-9; index >= i-checkLeftNum*9; index-=9) {\n      if (squares[index] === current)  {\n        for (let j = index; j < i; j+=9) {\n          squares[j] = current;\n        }\n        break;\n      } else if (squares[index] === null) {\n        break;\n      }\n    }\n\n    /*------------ Check Lower Left --------------*/\n    for (let index = i+7; index <= i+checkLeftNum*7; index+=7) {\n      if (squares[index] === current)  {\n        for (let j = index; j > i; j-=7) {\n          squares[j] = current;\n        }\n        break;\n      } else if (squares[index] === null) {\n        break;\n      }\n    }\n\n    /* Count Stone */\n    let Xcount = 0;\n    let Ocount = 0;\n    let NULLcount = 0;\n    Object.keys(squares).forEach((current)=>{//point!!\n      if (squares[+current]==='X') Xcount++;\n      else if (squares[+current]==='O') Ocount++;\n      NULLcount = 64 - Xcount - Ocount;\n      //console.log(squares[+current]);\n    });\n    \n    /* 置けないところ反映 */\n    const Xdif: number = Xcount - currentXcount;\n    const Odif: number = Ocount - currentOcount;\n    if (Xdif===0 || Odif===0) {\n      squares[i] = null;\n      if (this.state.xIsNext) {\n        Ocount--;\n      } else {\n        Xcount--;\n      }\n      alert('その場所には配置できません');\n      this.setState({xIsNext: !this.state.xIsNext});\n    }\n\n    /* Judge Win */\n    if (NULLcount===0) {\n      if (Xcount > Ocount) {\n        this.setState({Winner: 'X'});\n      } else if (Xcount < Ocount) {\n        this.setState({Winner: 'O'});\n      } else {\n        this.setState({Winner: 'Draw'});\n      }\n      \n    }\n\n    /* Set State */\n    this.setState({\n                    squares: squares,\n                    Xcount: Xcount,\n                    Ocount: Ocount\n                  });\n  }\n\n  componentDidMount() {\n    this.setInitialBoard();\n  }\n\n  render() {\n    const squares = {...this.state.squares};\n\n    let status;\n    status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    let winner;\n    winner = this.state.Winner === null ? ' ' : 'WINNER => '+this.state.Winner;\n\n    let restart;\n    restart = this.state.Winner === null ? ' ' : <button type=\"button\" onClick={this.setRestart}> Restart </button>\n\n    return (\n      <React.Fragment>\n        <header>\n          <p className=\"headerP\">\n            Othello to study React with TypeScript\n          </p>      \n        </header>\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board\n              squares={squares}\n              onClick={(i) => this.handleClick(i)}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <div>X Point : {this.state.Xcount}</div>\n            <div>O Point : {this.state.Ocount}</div>\n            <p className=\"win\">{winner}</p>\n            <button type=\"button\" onClick={this._Pass}> Pass </button>\n            <button type=\"button\" onClick={this.setIsGiveUp}> Give Up </button>\n            {restart}\n          </div>\n        </div>\n      </React.Fragment>\n      \n    );\n  }\n}\n\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);"],"sourceRoot":""}