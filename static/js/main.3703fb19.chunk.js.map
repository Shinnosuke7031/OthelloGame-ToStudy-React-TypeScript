{"version":3,"sources":["index.module.css","reducers.ts","actions.ts","components/Board-Square.tsx","App.tsx","containers.ts","index.tsx"],"names":["module","exports","initialState","squares","Array","fill","xIsNext","Xcount","Ocount","Winner","isGiveUp","app","combineReducers","game","state","action","type","currentXcount","currentOcount","index","checkFripOver_Count","countStone","NULLcount","Xdif","Odif","alert","winner","Object","assign","current","winner_by_give","i","currentROW","Math","floor","checkRightNum","j","checkLeftNum","checkUpNum","checkDownNum","keys","forEach","Square","props","className","styles","square","onClick","value","Board","renderSquare","board_row","Game","this","setRestart","status","restart","pass","give","btn","PassTurn","GiveUp","Fragment","headerP","under_line","game_board","handleClick","game_info","win","React","Component","GameContainer","connect","dispatch","clickSquare","store","createStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3703fb19.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerP\":\"src_headerP__3agV1\",\"win\":\"src_win__2tPIN\",\"board_row\":\"src_board_row__3VI1C\",\"status\":\"src_status__3oEuD\",\"square\":\"src_square__9cWov\",\"kbd_navigation\":\"src_kbd_navigation__1gJ7t\",\"game\":\"src_game__37WUl\",\"game_info\":\"src_game_info__234k2\",\"under_line\":\"src_under_line__3Qyqw\",\"btn\":\"src_btn__39qwB\"};","import { combineReducers } from \"redux\";\nimport { CLICK_SQUARE, SET_INITIAL_POSI, PASS_TURN, GIVE_UP } from \"./actions\";\n\ninterface Actions {\n  type: string;\n  index: number;\n}\n\ninterface GameState {\n  squares: ('O' | 'X' | null)[];\n  xIsNext: boolean;\n  Xcount: number;\n  Ocount: number;\n  Winner: ('O' | 'X' | 'Draw' | null);\n  isGiveUp: boolean;\n}\n\n const initialState: GameState = {\n  squares: Array(63).fill(null),\n  xIsNext: true,\n  Xcount: 2,\n  Ocount: 2,\n  Winner: null,\n  isGiveUp: false\n};\n\n function game(state = initialState, action: Actions) {\n  switch (action.type) {\n    case CLICK_SQUARE://マスをクリックした時\n      //console.log(\"CLICK_SQUARE\");\n      const currentXcount = state.Xcount;\n      const currentOcount = state.Ocount;\n      const squares = {...state.squares};\n      if (squares[action.index]) {\n        return state;\n      }\n\n      squares[action.index] = state.xIsNext ? 'X' : 'O';\n\n      //let xIsNext = !state.xIsNext;\n      let xIsNext = !state.xIsNext;\n\n      checkFripOver_Count(action.index, squares);//裏返す\n      let [Xcount, Ocount, NULLcount] = countStone(squares);//石を数える\n\n      //置けないところ反映\n      const Xdif: number = Xcount - currentXcount;\n      const Odif: number = Ocount - currentOcount;\n      if (Xdif===0 || Odif===0) {\n        squares[action.index] = null;\n        if (xIsNext) {\n          Ocount--;\n        } else {\n          Xcount--;\n        }\n        alert('その場所には配置できません');\n        xIsNext = !xIsNext;\n      }\n      \n      let winner: ('O' | 'X' | 'Draw' | null) = null;\n      if (NULLcount===0) {\n        if (Xcount > Ocount) {\n          winner = 'X';\n        } else if (Xcount < Ocount) {\n          winner = 'O';\n        } else {\n          winner = 'Draw';\n        }\n        \n      }\n\n      return Object.assign({}, state, {\n        squares: squares,\n        xIsNext: xIsNext,\n        Xcount: Xcount,\n        Ocount: Ocount,\n        Winner: winner\n      });\n    \n    case SET_INITIAL_POSI:\n      //console.log(\"SET_INITIAL_POSI\");\n      const current = {...initialState.squares};\n      current[27] = \"X\";\n      current[36] = \"X\";\n      current[28] = \"O\";\n      current[35] = \"O\";\n      //console.log(Object.assign({}, state, {squares: current}));\n      \n      return Object.assign({}, state, initialState, {\n        squares: current,\n      });\n\n    case PASS_TURN:\n      return Object.assign({}, state, {xIsNext: !state.xIsNext});\n\n    case GIVE_UP:\n      let winner_by_give;\n      if (state.xIsNext) {\n        winner_by_give = 'O';\n      } else {\n        winner_by_give = 'X';\n      }\n      return Object.assign({}, state, {Winner: winner_by_give});\n\n     default:\n      return state;\n  }\n}\n\nexport const app = combineReducers({ game });\n\n/* ------------------------------------------------------------------------------- */\n/* ------------------------------------------------------------------------------- */\n\nconst checkFripOver_Count = (i: number, squares: ('O' | 'X' | null)[]) => {\n  const current = squares[i];//現在、クリック（配置）された場所の石（'X' or 'O'）\n  const currentROW = Math.floor(i/8);//クリックされた場所の行\n\n  /*------------ Check Right Row --------------*/\n  const checkRightNum = ((currentROW + 1) * 8 - 1) - i;  //(34/8+1=5)*8-1=39, 39 - i(=34)= // (iの列の最後尾のindex) - i = チェックする数\n  for (let index = i+1; index <= i+checkRightNum; index++) {\n    if (squares[index] === current)  {\n      for (let j = index; j > i; j--) {\n        squares[j] = current;\n      }\n      break;\n    } else if (squares[index] === null) {\n      break;\n    }\n  }\n\n  /*------------ Check Left Row --------------*/\n  const checkLeftNum = i - currentROW * 8;  // i - (iの列の先頭のindex) = チェックする数\n  for (let index = i-1; index >= i-checkLeftNum; index--) {\n    if (squares[index] === current)  {\n      for (let j = index; j < i; j++) {\n        squares[j] = current;\n      }\n      break;\n    } else if (squares[index] === null) {\n      break;\n    }\n  }\n\n  /*------------ Check Up Column --------------*/\n  const checkUpNum = i/8;\n  for (let index = i-8; index >= i-checkUpNum*8; index-=8) {\n    if (squares[index] === current)  {\n      for (let j = index; j < i; j+=8) {\n        squares[j] = current;\n      }\n      break;\n    } else if (squares[index] === null) {\n      break;\n    }\n  }\n\n  /*------------ Check Down Column --------------*/\n  const checkDownNum = 8-checkUpNum;\n  for (let index = i+8; index <= i+checkDownNum*8; index+=8) {\n    if (squares[index] === current)  {\n      for (let j = index; j > i; j-=8) {\n        squares[j] = current;\n      }\n      break;\n    } else if (squares[index] === null) {\n      break;\n    }\n  }\n\n  /*------------ Check Upper Right --------------*/\n  for (let index: number = i-7; index >= i-checkRightNum*7; index-=7) {\n    if (squares[index] === current)  {\n      for (let j = index; j < i; j+=7) {\n        squares[j] = current;\n      }\n      break;\n    } else if (squares[index] === null) {\n      break;\n    }\n  }\n\n  /*------------ Check Lower Right --------------*/\n  for (let index: number = i+9; index <= i+checkRightNum*9; index+=9) {\n    if (squares[index] === current)  {\n      for (let j = index; j > i; j-=9) {\n        squares[j] = current;\n      }\n      break;\n    } else if (squares[index] === null) {\n      break;\n    }\n  }\n\n  /*------------ Check Upper Left --------------*/\n  for (let index = i-9; index >= i-checkLeftNum*9; index-=9) {\n    if (squares[index] === current)  {\n      for (let j = index; j < i; j+=9) {\n        squares[j] = current;\n      }\n      break;\n    } else if (squares[index] === null) {\n      break;\n    }\n  }\n\n  /*------------ Check Lower Left --------------*/\n  for (let index = i+7; index <= i+checkLeftNum*7; index+=7) {\n    if (squares[index] === current)  {\n      for (let j = index; j > i; j-=7) {\n        squares[j] = current;\n      }\n      break;\n    } else if (squares[index] === null) {\n      break;\n    }\n  }\n\n}\n\nconst countStone = (squares: ('O' | 'X' | null)[]) => {\n  let Xcount = 0;\n  let Ocount = 0;\n  let NULLcount = 0;\n  Object.keys(squares).forEach((current)=>{//point!!\n    if (squares[+current]==='X') Xcount++;\n    else if (squares[+current]==='O') Ocount++;\n    NULLcount = 64 - Xcount - Ocount;\n    //console.log(squares[+current]);\n  });\n\n  return [Xcount, Ocount, NULLcount];\n  \n}","/*\n * action types\n */\n\nexport const CLICK_SQUARE = \"CLICK_SQUARE\";\nexport const SET_INITIAL_POSI = \"SET_INITIAL_POSI\";\nexport const PASS_TURN = \"PASS_TURN\";\nexport const GIVE_UP = \"GIVE_UP\";\n\n /*\n  * action creators\n  */\n\nexport function clickSquare(index: number) {\n  return { type: CLICK_SQUARE, index };\n}\n\nexport function clickReset() {\n  return { type: SET_INITIAL_POSI };\n}\n\nexport function clickPass() {\n  return { type: PASS_TURN };\n}\n\nexport function clickGiveUp() {\n  return { type: GIVE_UP };\n}","import React from 'react';\nimport styles from '../index.module.css';\n\n\ninterface SquareProps {\n  value: any;\n  onClick: () => void;\n}\n\nconst Square = (props: SquareProps) => {\n  return (\n    <button className={styles.square} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\ninterface BoardProps {\n  squares: ('O' | 'X' | null)[];\n  onClick: (i: number) => void;\n}\n\nconst Board =  (props: BoardProps) =>{\n\n  const renderSquare = (i: number) => {\n    return <Square value={props.squares[i]}\n            onClick={() => props.onClick(i)}\n            />;\n    }\n\n  return (\n    <div>\n      <div className={styles.board_row}>\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n        {renderSquare(6)}\n        {renderSquare(7)}\n      </div>\n      <div className={styles.board_row}>\n        {renderSquare(8)}\n        {renderSquare(9)}\n        {renderSquare(10)}\n        {renderSquare(11)}\n        {renderSquare(12)}\n        {renderSquare(13)}\n        {renderSquare(14)}\n        {renderSquare(15)}\n      </div>\n      <div className={styles.board_row}>\n        {renderSquare(16)}\n        {renderSquare(17)}\n        {renderSquare(18)}\n        {renderSquare(19)}\n        {renderSquare(20)}\n        {renderSquare(21)}\n        {renderSquare(22)}\n        {renderSquare(23)}\n      </div>\n      <div className={styles.board_row}>\n        {renderSquare(24)}\n        {renderSquare(25)}\n        {renderSquare(26)}\n        {renderSquare(27)}\n        {renderSquare(28)}\n        {renderSquare(29)}\n        {renderSquare(30)}\n        {renderSquare(31)}\n      </div>\n      <div className={styles.board_row}>\n        {renderSquare(32)}\n        {renderSquare(33)}\n        {renderSquare(34)}\n        {renderSquare(35)}\n        {renderSquare(36)}\n        {renderSquare(37)}\n        {renderSquare(38)}\n        {renderSquare(39)}\n      </div>\n      <div className={styles.board_row}>\n        {renderSquare(40)}\n        {renderSquare(41)}\n        {renderSquare(42)}\n        {renderSquare(43)}\n        {renderSquare(44)}\n        {renderSquare(45)}\n        {renderSquare(46)}\n        {renderSquare(47)}\n      </div>\n      <div className={styles.board_row}>\n        {renderSquare(48)}\n        {renderSquare(49)}\n        {renderSquare(50)}\n        {renderSquare(51)}\n        {renderSquare(52)}\n        {renderSquare(53)}\n        {renderSquare(54)}\n        {renderSquare(55)}\n      </div>\n      <div className={styles.board_row}>\n        {renderSquare(56)}\n        {renderSquare(57)}\n        {renderSquare(58)}\n        {renderSquare(59)}\n        {renderSquare(60)}\n        {renderSquare(61)}\n        {renderSquare(62)}\n        {renderSquare(63)}\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from './components/Board-Square';\nimport styles from './index.module.css';\n\ninterface GameState {\n  squares: ('O' | 'X' | null)[];\n  xIsNext: boolean;\n  Xcount: number;\n  Ocount: number;\n  Winner: ('O' | 'X' | 'Draw' | null);\n  isGiveUp: boolean;\n}\n\ninterface TypeDispach {\n  handleClick: (index: number) => void;\n  setRestart: () => void;\n  PassTurn: () => void;\n  GiveUp: () => void;\n}\n\ntype ChildProps = GameState & TypeDispach;\n\nexport class Game extends React.Component<ChildProps> {\n\n  componentDidMount() {\n    this.props.setRestart();\n    \n  }\n\n  render() {\n    const squares = {...this.props.squares};\n    let status;\n    status = 'Next player: ' + (this.props.xIsNext ? 'X' : 'O');\n    let winner;\n    winner = this.props.Winner === null ? ' ' : 'WINNER => '+this.props.Winner;\n\n    let restart;\n    restart = this.props.Winner === null ? ' ' : <button type=\"button\" className={styles.btn} onClick={()=>this.props.setRestart()}> Restart </button>;\n    let pass;\n    pass = this.props.Winner === null ? <button type=\"button\" className={styles.btn} onClick={()=>this.props.PassTurn()}> Pass </button>: ' ';\n    let give;\n    give = this.props.Winner === null ? <button type=\"button\" className={styles.btn} onClick={()=>this.props.GiveUp()}> Give Up </button>: ' ';\n\n    return (\n      <React.Fragment>\n        <header>\n          <p className={styles.headerP}>\n            Othello to study <span className={styles.under_line}>React</span> and <span className={styles.under_line}>Redux</span> with <span className={styles.under_line}>TypeScript</span>\n          </p>      \n        </header>\n        <div className={styles.game}>\n          <div className={styles.game_board}>\n            <Board\n              squares={squares}\n              onClick={(i) => this.props.handleClick(i)}\n            />\n          </div>\n          <div className={styles.game_info}>\n            <div>{status}</div>\n            <div>X Point : {this.props.Xcount}</div>\n            <div>O Point : {this.props.Ocount}</div>\n            \n            {give}\n            {pass}\n            {restart}\n\n            <p className={styles.win}>{winner}</p>\n\n          </div>\n        </div>\n      </React.Fragment>\n      \n    );\n  }\n}\n","import { connect } from \"react-redux\";\nimport { clickSquare, clickReset, clickPass, clickGiveUp } from \"./actions\";\nimport { Game } from \"./App\";\nimport { Dispatch } from \"redux\";\n\ninterface GameState {\n  squares: ('O' | 'X' | null)[];\n  xIsNext: boolean;\n  Xcount: number;\n  Ocount: number;\n  Winner: ('O' | 'X' | 'Draw' | null);\n  isGiveUp: boolean;\n}\n\ninterface Gstate {\n  game: GameState;\n}\n\n const mapStateToProps = (state: Gstate) => {\n  return state.game;\n};\n\n const mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    handleClick: (index: number) => {\n      dispatch(clickSquare(index));\n    },\n    setRestart: () => {\n      dispatch(clickReset());\n    },\n    PassTurn: () => {\n      dispatch(clickPass());\n    },\n    GiveUp: () => {\n      dispatch(clickGiveUp());\n    }\n  };\n};\n\n export const GameContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Game);","import React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { createStore } from \"redux\";\nimport { app } from \"./reducers\";\nimport { GameContainer } from './containers';\nimport { Provider } from \"react-redux\";\n\n\nconst store = createStore(app);\n\nReactDOM.render(\n  <Provider store={store}>\n    <GameContainer />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}